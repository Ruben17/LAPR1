/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projeto_lapr1;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

/**
 *
 * @author Ruben
 */
public class Projeto_LAPR1 {

    public static final int NUMBER_INPUT_LINES = 10;

    /**
     * @param args the command line arguments
     * @throws java.io.FileNotFoundException
     */
    public static void main(String[] args) throws FileNotFoundException {

        int nLinhasficheiro;
        String[] inputFile = new String[NUMBER_INPUT_LINES];
        nLinhasficheiro = lerFicheiroInput(inputFile);
        String[] base = base(nLinhasficheiro);
        String[] header = header(nLinhasficheiro);
        int[] indicePivot = new int [2];
        
        
        indicePivot[1]=selectEntryValue(simplexTableau, nLinhasficheiro);
        indicePivot[0]=selectExitValue(simplexTableau, nLinhasficheiro, indicePivot[1]);
        
        
        
    }

    public static String[] base(int nLinhasficheiro) {

        String[] base = new String[nLinhasficheiro];
        int numSlackVar = 1;
        base[0] = "base";

        for (int i = 1; i < nLinhasficheiro; i++) {
            base[i] = "S" + numSlackVar;
            numSlackVar++;
        }
        return base;
    }

    public static String[] header(int nLinhasficheiro) {

        int numSlackVar = 1;
        String[] header = new String[nLinhasficheiro + 2];

        header[0] = "X1";
        header[1] = "X2";

        for (int i = 2; i < header.length - 1; i++) {
            header[i] = "S" + numSlackVar;
        }

        header[header.length - 1] = "b";
        return header;
    }

    //cria o vetor inputFile (a versão digital do ficheiro)
    public static int lerFicheiroInput(String[] inputFile) throws FileNotFoundException {

        int nLinhas = 0;
        String linha, nomeFicheiro = "file.txt";

        Scanner fileIn = new Scanner(new File(nomeFicheiro));

        while (fileIn.hasNext()) {

            linha = fileIn.nextLine();

            if (linha.length() > 0 && nLinhas < inputFile.length) {

                inputFile[nLinhas] = linha;
                nLinhas++;
            }

        }
        fileIn.close();

        return nLinhas;
    }

    /**
     *
     * @param conditions
     * @return
     */
    public static void createSimplexTableau(String[] conditions) {

    }

    
    /**
     * Verifica qual o valor menor atual na equação principal - valor de entrada
     *
     *
     * @param tabelaSimplex
     * @return da coluna do valor de entrada
     */
    public static int selectEntryValue(int[][] tabelaSimplex) {

        int indiceEntrada = 0, menor = tabelaSimplex[0][0];

        for (int i = 1; i < tabelaSimplex[0].length - 1; i++) {

            if (tabelaSimplex[0][i] < menor) {
                menor = tabelaSimplex[0][i];
                indiceEntrada = i;
            }

        }
        return indiceEntrada;
    }

    
    /**
     * Seleciona qual o valor de saída, fazendo o quoeficiente da ultima coluna com a coluna
     * dos numeros da coluna do valor de entrada
     * 
     * 
     * @param tabelaSimplex
     * @param nLinhas
     * @param indiceSaida
     * @return da linha do valor de saída
     */
    public static int selectExitValue(int[][] tabelaSimplex, int nLinhas, int indiceEntrada) {

        double[] valores = new double[nLinhas];
        int indiceSaida;

        for (int i = 1; i < valores.length; i++) {

            valores[i] = tabelaSimplex[i][tabelaSimplex[0].length - 1] / tabelaSimplex[i][indiceEntrada];

        }
        double menorPos=valores[1];
        indiceSaida=1;

        for (int i = 1; i < valores.length; i++) {
        
            if(valores[i] < menorPos && valores[i] > 0){
            menorPos=valores[i];
            indiceSaida=i;
        
        }
        
    }
    
    return indiceSaida;
    }
    
    
    public static double[][] pivoting(double matriz[][], int[] indicePivot) {

        int linhaPivot = indicePivot[0];
        int colunaPivot = indicePivot[1];
        double pivot = matriz[linhaPivot][colunaPivot];
        double[][] matrizCondens = new double[4][4];

        for (int x = 0; x < matriz[0].length; x++) {
            matriz[linhaPivot][x] = matriz[linhaPivot][x] / pivot;
        }

        for (int i = 0; i < matriz.length; i++) {
            if (i != linhaPivot) {
                for (int j = 0; j < matriz[i].length; j++) {

                    matrizCondens[i][j] = matriz[i][j] - (matriz[i][colunaPivot] * matriz[linhaPivot][j]);

                }
            }
        }
        for (int x = 0; x < matriz[0].length; x++) {
            matrizCondens[linhaPivot][x] = matriz[linhaPivot][x];
        }

        return matrizCondens;
    }

}
